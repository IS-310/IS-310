# -*- coding: utf-8 -*-
"""RandomForestRegressor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18jYUBvptwC2DNYVEuiXYK7fW0avDz6sE
"""

#Import dependencies
import numpy as np
from numpy.core.fromnumeric import ravel; np.random.seed(0)
import pandas as pd

import io
from sklearn.ensemble import RandomForestRegressor
import pickle 

'''
#import dataset
from google.colab import files
uploaded = files.upload()
'''

name = 'RainData - TRIAL.csv'
#RAIN_DATA = pd.read_csv(io.StringIO(uploaded[name].decode('utf-8')))
RAIN_DATA = pd.read_csv(name)
RAIN_DATA = RAIN_DATA[::-1].reset_index(drop = True)
dataset = RAIN_DATA.astype(float)
dataset = dataset.to_numpy()
np.random.shuffle(dataset) 

#prepare entire dataset for training
all_x = dataset[:,2:]
all_y = dataset[:,0].reshape(-1,1)
x_train_1 = all_x[0:,:]
y_train_1 = all_y[0:,:]

#fit dataset into tree
tree = RandomForestRegressor(n_estimators=10)
tree.fit(x_train_1, y_train_1)

# save the model to disk
filename = 'finalized_model.sav'
pickle.dump(tree, open(filename, 'wb'))

'''
# load the model from disk
loaded_model = pickle.load(open(filename, 'rb'))


#predict WDR penetration based on current conditions(y_present)
y_present = y_present.reshape(1, -1)
pred = loaded_model.predict(y_present)

#implement threshold value
def deploy(predicted_value):
  threshold_value = 1.5
  if (predicted_value > threshold_value):
    return 1
  else:
    return 0

deploy(pred)
'''